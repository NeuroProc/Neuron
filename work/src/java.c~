import java.util.*;

public class MaxMatching {

  static boolean findPath(int u1, boolean[][] d, int[] matching, boolean[] vis) {
    vis[u1] = true;
    for (int v = 0; v < matching.length; ++v) {
      int u2 = matching[v];
      if (d[u1][v] && (u2 == -1 || !vis[u2] && findPath(u2, d, matching, vis))) {
        matching[v] = u1;
        return true;
      }
    }
    return false;
  }

  public static int maxMatching(boolean[][] d) {
    int n1 = d.length;
    int n2 = n1 == 0 ? 0 : d[0].length;
    int[] matching = new int[n2];
    Arrays.fill(matching, -1);
    int matches = 0;
    for (int u = 0; u < n1; u++)
      if (findPath(u, d, matching, new boolean[n1]))
        ++matches;
    return matches;
  }

  // Usage example
  public static void main(String[] args) {
	  
	    Scanner in = new Scanner(System.in);
	    int n, i, j, a, b;
	    n = in.nextInt();
	    
	    
	    
		boolean[][] mas = new boolean[n][n]; // инициализация матрицы смежности
		
		
		
		for (i = 0; i<n; i++)
		{
			for (j = 0; j<n; j++)
			{
				mas[i][j] = false;
			}
		}
		
		System.out.println(mas.getLong);
		
		for (i = 0; i<n-1; i++)
		{
			a = in.nextInt();
			b = in.nextInt();
			a--;
			b--;
			mas[a][b] = true;
			mas[b][a] = true;
		}


	    int res = maxMatching(mas);
	    System.out.println(res >> 1);
	  
	  /*
    int res = maxMatching(new boolean[][] { { false, true , false, false, false, false, false, false, false, false, false, false }, 
    										{ true , false, true , true , false, false, false, false, false, false, false, false },
    										{ false, true , false, false, false, false, false, false, false, false, false, false },
    										{ false, true , false, false, true , false, false, false, true , false, true , false },
    										{ false, false, false, true , false, true , true , false, false, false, false, false },
    										{ false, false, false, false, true , false, false, false, false, false, false, false },
    										{ false, false, false, false, true , false, false, true , false, false, false, false },
    										{ false, false, false, false, false, false, true , false, false, false, false, false },
    										{ false, false, false, true , false, false, false, false, false, true , false, false },
    										{ false, false, false, false, false, false, false, false, true , false, false, false },
    										{ false, false, false, true , false, false, false, false, false, false, false, true  },
    										{ false, false, false, false, false, false, false, false, false, false, true , false }
    										});
    System.out.println(res);
    */
  }
}

